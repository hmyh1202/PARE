#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
bed2nfrdip: determine nfr dip for an input coordinates in BED format
Copyright (C) 2015  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

FLANK_WIN_UP=500
FLANK_WIN_DOWN=500
GENOME="mm9"
AVG=0;

#### usage ####
usage() {
	echo Program: "bed2nfrdip (compute nfr dip corresponding to input cooredinates in BED format)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bed2nfrdip -i <file> -j <file(s)> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates in BED format (can be stdin)]"
    echo " -j <file>   [input mapped reads in BAM format]"
    echo "             [if multiple seperate by a comma]"
    echo "[OPTIONS]"
    echo " -k <float>  [size factor to normalize the expression of read block]"
    echo "             [if multiple separate by a comma]"
    echo " -t          [normalize expression by counts per million mapped reads]"
    echo " -l <int>    [length of the upstream flanking window (default: 500)]"
    echo " -m <int>    [length of the downstream flanking window (default: 500)]"
    echo " -e <int>    [extend 3' end of reads by input number of bases]"
    echo "             [if multiple separate by a comma]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -v          [instead of giving expression for each replicate, output only the mean (deafult: 0)]"
    echo "             [assumes that consecutive input files are replicates 1 and 2, respectively]"
	echo " -h          [help]"
    echo "[NOTE]"
    echo " In case of error: Could not open input BAM files, refer to:"
    echo " https://groups.google.com/forum/#!msg/bedtools-discuss/_LNuoRWHn50/14MaqyzyzXsJ"
    echo " i.e. make sure header of all input bam files is identical"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:k:tl:m:e:g:vh ARG; do
    case "$ARG" in
    i) BEDFILE=$OPTARG;;
    j) BAMFILE=$OPTARG;;
    k) SIZEFACTOR=$OPTARG;;
    t) CPM=1;;
    l) FLANK_WIN_UP=$OPTARG;;
    m) FLANK_WIN_DOWN=$OPTARG;;
    e) EXTEND=$OPTARG;;
    g) GENOME=$OPTARG;;
    v) AVG=1;;
    h) HELP=1;;
    esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$BEDFILE" -o -z "$BAMFILE" -o "$HELP" ]; then
	usage
fi

## check if input genome option is suitable
GENOME_FILE=$(initialize_genome -i $PAREPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$PAREPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    echo
    echo "computation for $GENOME is not feasible yet"
    echo "please add the chromosome size file for $GENOME at $PAREPATH/data/annotations"
    echo "also update the $PAREPATH/data/annotations/GENOME_FILE"
    echo
    usage
fi

## parse input bam files in an array
oIFS=$IFS
IFS=","
BAMFILES_ARR=($BAMFILE)
BAMFILES_COUNT=${#BAMFILES_ARR[@]}
IFS=$oIFS

## initialize size factors, if both size factors and total reads not provided
if [ -z "$SIZEFACTOR" -a -z "$CPM" ]; then
    SIZEFACTOR=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        SIZEFACTOR="$SIZEFACTOR,1"
    done
    SIZEFACTOR=`echo $SIZEFACTOR | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## initialize extend parameter, if not provided
if [ -z "$EXTEND" ]; then
    EXTEND=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        EXTEND="$EXTEND,0"
    done
    EXTEND=`echo $EXTEND | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## parse extend parameter in an array
IFS=","
EXTENDS=($EXTEND)
EXTENDS_COUNT=${#EXTENDS[@]}
IFS=$oIFS

## parse bam files in an array
IFS=","
BAMFILES=$(echo $BAMFILE | sed 's/\,/ /g')
IFS=$oIFS

## create temporary BED file if input is from stdin
if [ "$BEDFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo ${LINE}
    done | perl -ane '$line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $TMP
    BEDFILE=$TMP
fi

## determine number of columns in the input BED file
WINDOW_PROVIDED=$(head -n 1 $BEDFILE | perl -ane 'if(scalar(@F)>=8 && $F[6]=~/^[0-9]+$/ && $F[7]=~/^[0-9]+$/) { print "1"; } else { print "0"; }');

if [ ! -z "$SIZEFACTOR" ]; then
    ## parse input size factors in an array
    IFS=","
    SIZEFACTORS=($SIZEFACTOR)
    SIZEFACTORS_COUNT=${#SIZEFACTORS[@]}
    IFS=$oIFS
    SIZEFACTOR="$SIZEFACTOR,$SIZEFACTOR,$SIZEFACTOR"

    if [ "$BAMFILES_COUNT" -ne "$SIZEFACTORS_COUNT" -o "$BAMFILES_COUNT" -ne "$EXTENDS_COUNT" ]; then
        echo -n "Please provide size factor and extend parameter for each input bam file";
        usage
    fi

    #bedtools multicov -bams $BAMFILES -bed $BEDFILE -q 10
    #perl -ane '$start=$F[1]-'$FLANK_WIN_UP'; $end=$F[1]-1; print "$F[0]\t$start\t$end\n";' $BEDFILE | bedtools multicov -bams $BAMFILES -bed stdin -q 10 | perl -ane '$field_count=scalar(@F)-'$BAMFILES_COUNT'; $line=(); foreach(@F[$field_count..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";'
    #perl -ane '$start=$F[2]+1; $end=$F[2]+'$FLANK_WIN_DOWN'; print "$F[0]\t$start\t$end\n";' $BEDFILE | bedtools multicov -bams $BAMFILES -bed stdin -q 10 | perl -ane '$field_count=scalar(@F)-'$BAMFILES_COUNT'; $line=(); foreach(@F[$field_count..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";'
    #| perl -ane '@sizeFactors=split(/\,/, "'$SIZEFACTOR'"); $field_count=scalar(@F)-('$BAMFILES_COUNT'*3); foreach(@F[0..$field_count-1]) { print "$_\t"; } $i=0; foreach(@F[$field_count..scalar(@F)-1]) { printf("%0.5f\t", $_/$sizeFactors[$i]); $i++; } print "\n";'
        
    if [ "$WINDOW_PROVIDED" -ge 1 ]; then
        paste <(bedtools multicov -bams $BAMFILES -bed $BEDFILE -q 10) <(perl -ane '$start=$F[1]-$F[6]; $end=$F[1]-1; print "$F[0]\t$start\t$end\n";' $BEDFILE | bedtools multicov -bams $BAMFILES -bed stdin -q 10 | perl -ane '$field_count=scalar(@F)-'$BAMFILES_COUNT'; $line=(); foreach(@F[$field_count..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";') <(perl -ane '$start=$F[2]+1; $end=$F[2]+$F[7]; print "$F[0]\t$start\t$end\n";' $BEDFILE | bedtools multicov -bams $BAMFILES -bed stdin -q 10 | perl -ane '$field_count=scalar(@F)-'$BAMFILES_COUNT'; $line=(); foreach(@F[$field_count..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";') | perl -ane '@sizeFactors=split(/\,/, "'$SIZEFACTOR'"); $field_count=scalar(@F)-('$BAMFILES_COUNT'*3); foreach(@F[0..$field_count-1]) { print "$_\t"; } $i=0; foreach(@F[$field_count..scalar(@F)-1]) { printf("%0.5f\t", $_/$sizeFactors[$i]); $i++; } print "\n";'
    else
        paste <(bedtools multicov -bams $BAMFILES -bed $BEDFILE -q 10) <(perl -ane '$start=$F[1]-'$FLANK_WIN_UP'; $end=$F[1]-1; print "$F[0]\t$start\t$end\n";' $BEDFILE | bedtools multicov -bams $BAMFILES -bed stdin -q 10 | perl -ane '$field_count=scalar(@F)-'$BAMFILES_COUNT'; $line=(); foreach(@F[$field_count..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";') <(perl -ane '$start=$F[2]+1; $end=$F[2]+'$FLANK_WIN_DOWN'; print "$F[0]\t$start\t$end\n";' $BEDFILE | bedtools multicov -bams $BAMFILES -bed stdin -q 10 | perl -ane '$field_count=scalar(@F)-'$BAMFILES_COUNT'; $line=(); foreach(@F[$field_count..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";') | perl -ane '@sizeFactors=split(/\,/, "'$SIZEFACTOR'"); $field_count=scalar(@F)-('$BAMFILES_COUNT'*3); foreach(@F[0..$field_count-1]) { print "$_\t"; } $i=0; foreach(@F[$field_count..scalar(@F)-1]) { printf("%0.5f\t", $_/$sizeFactors[$i]); $i++; } print "\n";'
    fi
else
    MAPPEDREADS=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        ## create index of input BAM file, if does not exist
        if [ ! -f "${BAMFILES_ARR[$i]}.bai" ]; then
            samtools index ${BAMFILES_ARR[$i]}
        fi

        COUNT=$(samtools idxstats ${BAMFILES_ARR[$i]} | grep -wE "^[0-9a-zA-Z]+" | perl -ane '$sum+=$F[2]; END { print "$sum"; }');
        MAPPEDREADS="$MAPPEDREADS,$COUNT"
    done
    MAPPEDREADS=$(echo $MAPPEDREADS | perl -ane '$_=~s/^\,//g; print $_;')
    MAPPEDREADS="$MAPPEDREADS,$MAPPEDREADS,$MAPPEDREADS"
    #echo $MAPPEDREADS; exit

    #echo $MAPPEDREADS; exit
    paste <(bedtools multicov -bams $BAMFILES -bed $BEDFILE -q 10) <(perl -ane '$start=$F[1]-'$FLANK_WIN_UP'; $end=$F[1]-1; print "$F[0]\t$start\t$end\n";' $BEDFILE | bedtools multicov -bams $BAMFILES -bed stdin -q 10 | perl -ane '$field_count=scalar(@F)-'$BAMFILES_COUNT'; $line=(); foreach(@F[$field_count..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";') <(perl -ane '$start=$F[2]+1; $end=$F[2]+'$FLANK_WIN_DOWN'; print "$F[0]\t$start\t$end\n";' $BEDFILE | bedtools multicov -bams $BAMFILES -bed stdin -q 10 | perl -ane '$field_count=scalar(@F)-'$BAMFILES_COUNT'; $line=(); foreach(@F[$field_count..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";') | perl -ane '@mappedReads=split(/\,/, "'$MAPPEDREADS'"); $field_count=scalar(@F)-('$BAMFILES_COUNT'*3); foreach(@F[0..$field_count-1]) { print "$_\t"; } $i=0; foreach(@F[$field_count..scalar(@F)-1]) { printf("%0.5f\t", ($_*1000000)/$mappedReads[$i]); $i++; } print "\n";'
fi | perl -ane '
    $len=($F[2]-$F[1]);
    $end=scalar(@F)-1;
    $start=($end-('$BAMFILES_COUNT'*3))+1;
    $up=$start+'$BAMFILES_COUNT';
    $down=$start+('$BAMFILES_COUNT'*2);
    $score=(); $nfr_expr=0; $flanking_expr=0;
    for($i=0; $i<'$BAMFILES_COUNT'; $i++) {
        #print "$start\t$up\t$down\t$i\t$len\n";
        if('$AVG') {
            $nfr_expr+=$F[$start];
            $flanking_expr+=($F[$up]+$F[$down]);
        }
        else {
            $nfr_expr=$F[$start]/$len;
            if('$WINDOW_PROVIDED') {
                $flanking_expr=($F[$up]+$F[$down])/($F[6]+$F[7]);
            } else {
                $flanking_expr=($F[$up]+$F[$down])/('$FLANK_WIN_UP'+'$FLANK_WIN_DOWN');
            }
            $score.=sprintf("%0.4f\t", $flanking_expr-$nfr_expr);
            #print "$F[$start]\t$F[$up]\t$F[$down]\t$nfr_expr\t$flanking_expr\n";
        }
        $start++; $up++; $down++;
    }
    if('$AVG') {
        $norm_nfr_expr=$nfr_expr/$len;
        if('$WINDOW_PROVIDED') {
            $norm_flanking_expr=$flanking_expr/($F[6]+$F[7]);
        } else {
            $norm_flanking_expr=$flanking_expr/('$FLANK_WIN_UP'+'$FLANK_WIN_DOWN');
        }
        $score.=sprintf("%0.4f\t", $norm_flanking_expr-$norm_nfr_expr);
    }

    $line=();
    $start=($end-('$BAMFILES_COUNT'*3))+1;
    foreach(@F[0..($start-1)]) { $line.="$_\t"; } $line=~s/\t+$//g;
    $score=~s/\t$//g;
    #print "$line\t$score\n";
    print "$F[0]\t$F[1]\t$F[2]\t$score\n";' 
<<"COMMENT"
COMMENT
#| perl -ane 'if('$AVG') { $field_count=scalar(@F)-'$BAMFILES_COUNT'; foreach(@F[0..$field_count-1]) { print "$_\t"; } $i=0; $line=(); for($i=$field_count; $i<scalar(@F); $i+=2) { if(!defined($F[$i+1])) { $F[$i+1]=$F[$i]; } $line.=sprintf("%0.5f\t", ($F[$i]+$F[$i+1])/2); } $line=~s/\t$//g; $line=~s/\s+$//g;print "$line\n"; } else { $_=~s/\s+$//g; print "$_\n"; }'

if [ ! -z "$TMP" ]; then
    rm $TMP
fi
exit
